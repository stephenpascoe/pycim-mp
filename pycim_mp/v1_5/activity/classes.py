"""
CIM v1.5 activity package classes.
"""
# Module exports.
__all__ = ["classes"]


# Module provenance info.
__author__="markmorgan"
__copyright__ = "Copyright 2010, Insitut Pierre Simon Laplace - Prodiguer"
__date__ ="$Jun 28, 2010 2:52:22 PM$"
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = "Sebastien Denvil"
__email__ = "sdipsl@ipsl.jussieu.fr"
__status__ = "Production"


def _activity():
    """Creates and returns instance of numerical_experiment class."""
    return {
        'type' : 'class',
        'name' : 'activity',
        'base' : None,
        'abstract' : True,
        'doc' : 'An abstract class used as the parent of MeasurementCampaigns, Projects, Experiments, and NumericalActivities.',
        'properties' : [
            ('responsible_parties', 'shared.responsible_party', '0.N', 'The point of contact(s) for this activity.This includes, among others, the principle investigator.'),
            ('funding_sources', 'str', '0.N', 'The entities that funded this activity.'),
            ('rationale', 'str', '0.N', 'For what purpose is this activity being performed?'),
            ('projects', 'activity.project_type', '0.N', 'The project(s) that this activity is associated with (ie: CMIP5, AMIP, etc).'),
        ],
        'decodings' : [

        ]
    }
    

def _experiment():
    """Creates and returns instance of experiment class."""
    return {
        'type' : 'class',
        'name' : 'experiment',
        'base' : 'activity.activity',
        'abstract' : True,
        'doc' : 'An abstract class used as the parent of MeasurementCampaigns, Projects, Experiments, and NumericalActivities.',
        'properties' : [
            ('measurement_campaigns', 'activity.measurement_campaign', '0.N', None),
            ('requires', 'activity.measurement_campaign', '0.N', None),
            ('generates', 'activity.measurement_campaign', '0.N', None),
        ],
        'decodings' : [

        ]
    }


def _experiment_relationship():
    """Creates and returns instance of experiment_relationship class."""
    return {
        'type' : 'class',
        'name' : 'experiment_relationship',
        'base' : 'shared.cim_relationship',
        'abstract' : False,
        'doc' : 'Contains a set of relationship types specific to a experiment document that can be used to describe its genealogy.',
        'properties' : [
            ('target', 'activity.experiment_relationship_target', '1.1', None),
            ('type', 'activity.experiment_relationship_type', '1.1', None),
        ],
        'decodings' : [

        ]
    }


def _experiment_relationship_target():
    """Creates and returns instance of experiment_relationship_target class."""
    return {
        'type' : 'class',
        'name' : 'experiment_relationship_target',
        'base' : None,
        'abstract' : False,
        'doc' : None,
        'properties' : [
            ('reference', 'shared.cim_reference', '0.1', None),
            ('numerical_experiment', 'activity.numerical_experiment', '0.1', None),
        ],
        'decodings' : [

        ]
    }


def _measurement_campaign():
    """Creates and returns instance of measurement_campaign class."""
    return {
        'type' : 'class',
        'name' : 'measurement_campaign',
        'base' : 'activity.activity',
        'abstract' : False,
        'doc' : None,
        'properties' : [
            # todo - clarify type
            ('duration', 'int', '1.1', None),
            ('experiments', 'activity.experiment', '1.N', None),
        ],
        'decodings' : [

        ]
    }


def _numerical_experiment():
    """Creates and returns instance of numerical_experiment class."""
    return {
        'type' : 'class',
        'name' : 'numerical_experiment',
        'base' : None,
        'abstract' : False,
        'doc' : 'A numerical experiment may be generated by an experiment, in which case it is inSupportOf the experiment. But a numerical experiment may also exist as an activity in its own right (as it might be if it were needed for a MIP). Examples: AR4 individual experiments, AR5 individual experiments, RAPID THC experiments etc.',
        'properties' : [
            ('cim_info', 'shared.cim_info', '1.1', None),
            ('short_name', 'str', '1.1', 'The name of the experiment (that is used internally).'),
            ('long_name', 'str', '0.1', 'The name of the experiment (that is recognized externally).'),
            ('description', 'str', '0.1', 'A free-text description of the experiment.'),
            ('experiment_id', 'str', '0.1', 'An experiment ID takes the form <number>.<number>[-<letter>].'),

        ],
        'decodings' : [

        ]
    }


def _simulation_relationship():
    """Creates and returns instance of simulation_relationship class."""
    return {
        'type' : 'class',
        'name' : 'simulation_relationship',
        'base' : 'shared.cim_relationship',
        'abstract' : False,
        'doc' : 'Contains a set of relationship types specific to a simulation document that can be used to describe its genealogy.',
        'properties' : [
            ('target', 'activity.simulation_relationship_target', '1.1', None),
            ('type', 'activity.simulation_relationship_type', '1.1', None),
        ],
        'decodings' : [

        ]
    }


def _simulation_relationship_target():
    """Creates and returns instance of simulation_relationship_target class."""
    return {
        'type' : 'class',
        'name' : 'simulation_relationship_target',
        'base' : None,
        'abstract' : False,
        'doc' : None,
        'properties' : [
            ('reference', 'shared.cim_reference', '0.1', None),
            ('target', 'activity.simulation_type', '0.1', None),
        ],
        'decodings' : [

        ]
    }



# Set of package classes.
classes = [
    _activity(),
    _experiment(),
    _experiment_relationship(),
    _experiment_relationship_target(),
    _measurement_campaign(),
    _numerical_experiment(),
    _simulation_relationship(),
    _simulation_relationship_target(),
]
